
# For SQL: set viewport width to 630px, disable minimap, remove top navbar
# Must check to ensure x11 is enabled:
echo $XDG_SESSION_TYPE

# SLQ Demo
ffmpeg -y -f x11grab  -s 630x700  -i :0.0+0,190 -vcodec libx264 -vf format=yuv420p  demo_sql.mp4

# Backups (delete both headers, click on create backup then start)
ffmpeg -y -f x11grab  -s 630x860  -i :0.0+0,160 -vcodec libx264 -vf format=yuv420p  demo_backups.mp4

# Access control (delete both headers, click on create backup then start)
ffmpeg -y -f x11grab  -s 630x860  -i :0.0+0,160 -vcodec libx264 -vf format=yuv420p  demo_access_control.mp4

ffmpeg -y -f x11grab  -s 630x860  -i :0.0+0,160 -vcodec libx264 -vf format=yuv420p  demo_query_stats.mp4
ffmpeg -y -f x11grab  -s 630x860  -i :0.0+0,160 -vcodec libx264 -vf format=yuv420p  demo_api.mp4
ffmpeg -y -f x11grab  -s 630x860  -i :0.0+0,160 -vcodec libx264 -vf format=yuv420p  demo_api.mp4



# For All else
ffmpeg -y -f x11grab  -s 570x460  -i :0.0+0,240 -vcodec libx264 -vf format=yuv420p  create.mp4





const wait = (timeout) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true)
    }, timeout)
  })
}

/**
 * Not worth it -> sql editor innerHTML is ~ 1mb
 */
let observer: MutationObserver;
function recordChanges(element: HTMLDivElement, onChange) {
  observer?.disconnect();
 
  const changes: { html: string; timeOffset: number; }[] = [];
  const start = Date.now();
  let prevInnerHTML = element.innerHTML;
  let prevStyle = getComputedStyle(element);

  function checkChanges() {
    const currInnerHTML = element.innerHTML;
    const currStyle = getComputedStyle(element);
    
    if (currInnerHTML !== prevInnerHTML || currStyle.cssText !== prevStyle.cssText) {
      const elementStyles = Array.from(element.querySelectorAll('*')).map(el => getComputedStyle(el));
      
      const clonedElement = element.cloneNode(true) as HTMLDivElement;
      const clonedElements = Array.from(clonedElement.querySelectorAll('*'));
      clonedElements.forEach((el, i) => {
        const computedStyle = elementStyles[i]!;
        Array.from(computedStyle).forEach(key => {
          const value = computedStyle.getPropertyValue(key);
          if(!value) return;
          el.style.setProperty(
            key, 
            value, 
            computedStyle.getPropertyPriority(key)
          )
        });
      });
      
      changes.push({ html: clonedElement.innerHTML, timeOffset: Date.now() - start });
      prevInnerHTML = currInnerHTML;
      prevStyle = currStyle;
      onChange(changes);
    }
  }

  observer = new MutationObserver(checkChanges);
  observer.observe(element, { childList: true, subtree: true });
}


function replayChanges(targetNode, changes){

  for await (const change of changes){
    await change.timeOffset;
    targetNode.innerHTML = change.html;
  }
}
 